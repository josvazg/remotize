package main

import (
	"fmt"
	"io"
	"os"
	"josvazg/remotize/tool"
	test "testing"
)

func copy(orig, dest string) os.Error {
	r, e := os.Open(orig)
	if e != nil {
		return e
	}
	w, e := os.Create(dest)
	if e != nil {
		return e
	}
	io.Copy(w, r)
	e = r.Close()
	if e != nil {
		return e
	}
	e = w.Close()
	if e != nil {
		return e
	}
	return nil
}

func TestRemotize(t *test.T) {
	tool.Remotize(new(Calcer))
	tool.Remotize(&URLStore{})
	if e := os.MkdirAll("_subtest", 0775); e != nil {
		t.Fatal(e.String())
		return
	}
	if o, e := tool.RunCmd(tool.Gocompile(), "subtestmain.go",
		"remotizedCalcer.go", "remotizedURLStore.go",
		"defs_test.go", "subtest.go"); e != nil {
		t.Fatal(string(o) + e.String())
		return
	} else {
		fmt.Println(string(o))
	}
	if o, e := tool.RunCmd(tool.Golink(), "-o", "subtest", "-L", "_subtest",
		"subtestmain."+tool.Goext()); e != nil {
		t.Fatal(string(o) + e.String())
		return
	} else {
		fmt.Println(string(o))
	}
	if o, e := tool.RunCmd("./subtest"); e != nil {
		t.Fatal(string(o) + e.String())
		return
	} else {
		fmt.Println(string(o))
	}
	if e := os.RemoveAll("remotizedCalcer.go"); e != nil {
		t.Fatal(e.String())
		return
	}
	if e := os.RemoveAll("remotizedURLStore.go"); e != nil {
		t.Fatal(e.String())
		return
	}
	tool.Autoremotize("defs_test.go", "subtest.go")

	/*fmt.Println("Generating code from NON interface type *simplecalc...")
	e := Remotize(&SimpleCalc{})
	if e != nil {
		fmt.Println(e)
		return
	}
	fmt.Println("Generating code from type new(Calc)...")
	e = Remotize(new(Calc))
	if e != nil {
		fmt.Println(e)
		return
	}
	copy("calcRemotized.go", "calcRemotized.go.rt")
	fmt.Println("Test Remotized Calc with autogenerated code from type...")
	runRemotizedCalc(t)
	fmt.Println("Autoremotize generating code from Calc source...")
	autoremotize(t)
	copy("calcRemotized.go", "calcRemotized.go.src")
	fmt.Println("Test Remotized Calc with autogenerated code from source...")
	runRemotizedCalc(t)
	fmt.Println("Testing new remotize code on *Calc...")
	Remotize0("remotize", &Calc{})
	runCmd("gotest", "-file", "subtest.go", "-file", "defs_test.go")*/
	/*server := rpc.NewServer()
	r := NewRemote(server, new(Calc))
	if r == nil {
		fmt.Println("Autogenerated code not ready yet")
		return
	}
	r1, w1 := io.Pipe()
	r2, w2 := io.Pipe()
	go server.ServeConn(IO(r2, w1))
	l := NewLocal(rpc.NewClient(IO(r1, w2)), new(Calc))
	if l == nil {
		fmt.Println("Autogenerated code client not ready yet")
		return
	}
	c := (l).(Calcer)
	c.Randomize()
	fmt.Println("Randomize()")
	c.RandomizeSeed(4123423.2314)
	fmt.Println("RandomizeSeed(4123423.2314)")
	fmt.Println("1+2=", c.Add(1, 2))
	// Support for in/out parameters
	val := 1.0
	op := &val
	c.AddTo(op, 2)
	fmt.Println("AddTo 1+2=", *op)
	fmt.Println("1-2=", c.Subtract(1, 2))
	fmt.Println("1123.1234*-2.21432=", c.Multiply(1123.1234, -2.21432))
	d, e := c.Divide(1123.1234, -24.21432)
	fmt.Println("1123.1234/-2.21432=", d, " e=", e)
	fmt.Println("pi=", c.Pi())*/
}
/*
func autoremotize(t *test.T) {
	n, e := Autoremotize(".", []string{"remotize_test.go"})
	if e != nil {
		fmt.Println(e)
		return
	}
	fmt.Println(n, "remotized")
}

func runRemotizedCalc(t *test.T) {
	// will invoke TestRemotizedCalc test explicitly
}
*/

func TestRemotizedCalc(t *test.T) {
	/*
		server := rpc.NewServer()
		s := NewServer(server, new(Calc), &simplecalc{}, "")
		if s == nil {
			fmt.Println("Autogenerated code not ready yet")
			return
		}
		r1, w1 := io.Pipe()
		r2, w2 := io.Pipe()
		go server.ServeConn(IO(r2, w1))
		ref := NewClient(rpc.NewClient(IO(r1, w2)), new(Calc), "")
		if ref == nil {
			fmt.Println("Autogenerated code client not ready yet")
			return
		}
		c := (ref).Remote().(Calc)
		c.Randomize()
		fmt.Println("Randomize()")
		c.RandomizeSeed(4123423.2314)
		fmt.Println("RandomizeSeed(4123423.2314)")
		fmt.Println("1+2=", c.Add(1, 2))
		// Support for in/out parameters
		val := 1.0
		op := &val
		c.AddTo(op, 2)
		fmt.Println("AddTo 1+2=", *op)
		fmt.Println("1-2=", c.Subtract(1, 2))
		fmt.Println("1123.1234*-2.21432=", c.Multiply(1123.1234, -2.21432))
		d, e := c.Divide(1123.1234, -24.21432)
		fmt.Println("1123.1234/-2.21432=", d, " e=", e)
		fmt.Println("pi=", c.Pi())*/
}

